# encoding utf-8

Zprava o vysledku profilingu

Na profiling bol vyuzity python line_profiler (https://github.com/pyutils/line_profiler.git)
    $ kernprof -lv profiling.py < data.txt
Cisla na vstup boli generovane pomocou skriptu generate.py 
    $ python generate.py -c <size_of_input> -s <size_of_interval> > data.txt

-----------------------------------------------------------------------------------------------------------

                                                VYSLEDKY

-----------------------------------------------------------------------------------------------------------
Vstup 10 cisel

Total time: 0.000196631 s
File: profiling.py
Function: standard_deviation at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def standard_deviation():
    29                                           
    30         1         61.5     61.5     31.3      x = [int(i) for i in input().split()]
    31         1          1.2      1.2      0.6      N = len(x)
    32                                           
    33         1          9.7      9.7      4.9      mean = m.divide(1, N)
    34         1         17.4     17.4      8.9      mean = m.multiply(mean, sum(x))
    35                                           
    36         1         22.0     22.0     11.2      s = sum([m.power(x[i], 2) for i in range(0, N)])
    37         1          2.4      2.4      1.2      tmp = m.power(mean, 2)
    38         1         21.4     21.4     10.9      tmp = m.multiply(N, tmp)
    39         1         10.0     10.0      5.1      s = m.subtract(s, tmp)
    40         1         18.4     18.4      9.4      tmp = (m.multiply(m.divide(1, m.subtract(N, 1)), s))
    41         1          5.3      5.3      2.7      s = m.sqrt(tmp, 2)
    42                                           
    43         1         27.2     27.2     13.9      print(s)
-----------------------------------------------------------------------------------------------------------
Vstup 1 000 cisel

Total time: 0.00229872 s
File: profiling.py
Function: standard_deviation at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def standard_deviation():
    29                                           
    30         1        736.5    736.5     32.0      x = [int(i) for i in input().split()]
    31         1          1.3      1.3      0.1      N = len(x)
    32                                           
    33         1         11.3     11.3      0.5      mean = m.divide(1, N)
    34         1         40.3     40.3      1.8      mean = m.multiply(mean, sum(x))
    35                                           
    36         1       1412.3   1412.3     61.4      s = sum([m.power(x[i], 2) for i in range(0, N)])
    37         1          3.7      3.7      0.2      tmp = m.power(mean, 2)
    38         1         28.6     28.6      1.2      tmp = m.multiply(N, tmp)
    39         1         11.7     11.7      0.5      s = m.subtract(s, tmp)
    40         1         17.6     17.6      0.8      tmp = (m.multiply(m.divide(1, m.subtract(N, 1)), s))
    41         1          5.6      5.6      0.2      s = m.sqrt(tmp, 2)
    42                                           
    43         1         29.7     29.7      1.3      print(s)
-----------------------------------------------------------------------------------------------------------
Vstup 1 000 000 cisel

Total time: 2.28281 s
File: profiling.py
Function: standard_deviation at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def standard_deviation():
    29                                           
    30         1     738245.4 738245.4     32.3      x = [int(i) for i in input().split()]
    31         1          3.6      3.6      0.0      N = len(x)
    32                                           
    33         1         24.3     24.3      0.0      mean = m.divide(1, N)
    34         1      22793.6  22793.6      1.0      mean = m.multiply(mean, sum(x))
    35                                           
    36         1    1521522.8    2e+06     66.7      s = sum([m.power(x[i], 2) for i in range(0, N)])
    37         1         21.7     21.7      0.0      tmp = m.power(mean, 2)
    38         1         70.6     70.6      0.0      tmp = m.multiply(N, tmp)
    39         1         23.1     23.1      0.0      s = m.subtract(s, tmp)
    40         1         34.5     34.5      0.0      tmp = (m.multiply(m.divide(1, m.subtract(N, 1)), s))
    41         1         10.7     10.7      0.0      s = m.sqrt(tmp, 2)
    42                                           
    43         1         59.3     59.3      0.0      print(s)
-----------------------------------------------------------------------------------------------------------

                                                ZHODNOTENIE

-----------------------------------------------------------------------------------------------------------
Kazda funkcia z math_lib bola oddelena na jeden riadok pre lepsiu prehladnost. 

Vysledok profilingu ukazuje ze ziadna funkcia s matematickej kniznice nesposobuje velke zdrzania.
Najdlhsie trvali operace na nacitanie dat a vypocet sumy stvorcouv v samotnej funkcii.

Z funkcii v matematickej kniznici sa prejavila funkcia m.power() ako najmenej optimalizovana (zabera vela casu relativne k vykonaniu funkcie)
Ostatne funkcie mali porovnatelne vysledky. 



** poznamka: protokol bol zhotoveny zo suboru profiling.py, ktory bol neskor premenovany na stddev.py. Jeho obsah zostal nezmeneny a odpoveda vysledkom tohoto protokolu ** 